buildscript {
	repositories {
		mavenCentral()
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
		maven {
			name = "sonatype"
			url = "https://oss.sonatype.org/content/repositories/snapshots/"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'

group = "com.elytradev"
archivesBaseName = "ProbeDataProviderAPI"
version = "MC1.12_ver1.1.1"

sourceCompatibility = 1.8
targetCompatibility = 1.8

minecraft {
	version = "1.12-14.21.0.2344"
	mappings = "snapshot_20170617"

	runDir = "minecraft"

	replaceIn 'src/main/java/com/elytradev/dataprovider/ProbeDataProviderPlugin.java'
	replace '@VERSION@', project.version
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "version", project.version
	inputs.property "mcversion", project.minecraft.version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'version':project.version, 'mcversion':project.minecraft.version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
		exclude '*.xcf' //Always exclude gimp source files.
	}
}

repositories {
	mavenCentral()
}

configurations {
	deploy
}

dependencies {
	deploy 'org.apache.maven.wagon:wagon-ssh:2.10'
}

ext.priv = parseConfig(file('private.properties'))

def parseConfig(File config) {
	if (!config.exists()) return null
	config.withReader {
		def prop = new Properties()
		prop.load(it)
		return (new ConfigSlurper().parse(prop))
	}
}

if (ext.priv != null) {
	uploadArchives {
		repositories.mavenDeployer {
			configuration = configurations.deploy
			pom.artifactId = 'probedataproviderapi'
			repository(url: "sftp://"+priv.sftpHost+priv.sftpPath) {
				authentication(userName: priv.sftpUser, privateKey: file(priv.sftpKey))
			}
		}
	}
}
